package vie.simulation;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import vie.embedding.Algorithm1;
import vie.embedding.Algorithm2;
import vie.embedding.Algorithm3;
import vie.embedding.Mapper;
import vie.models.PhysicalLink;
import vie.models.PhysicalNode;
import vie.models.Topology;
import vie.models.VirtualLink;
import vie.models.VirtualRequest;
import vie.utilities.NetworkTopology;
import vie.utilities.TopologyUtil;

public class Simulator {

	private int numberOfRequests = 100;    		// Default value for number of virtual request generated by simulator
	private int maxNodes = 4;					// Default value for max number of virtual nodes per virtual request
	
	private Topology topology;					// Topology generated by adjacency matrix

	private List<VirtualRequest> requests;		// List of virtual requests

	
	/**
	 * Constructor reads adjacency matrix for specified topology type
	 * @param type - Type of topology being used
	 * @throws IOException
	 */
	public Simulator(NetworkTopology type, int computationalAvailability, int bandwidthAvailability) throws IOException{
		this.topology = TopologyUtil.readAdjacencyMatrix(type, computationalAvailability, bandwidthAvailability);
	}
	
	// --------------------------------------- ACCESSORS -------------------------------------- //
	
	/**
	 * Gets the number of virtual requests the simulator is set to generate
	 * @return number of virtual request the simulator will generate
	 */
	public int getNumberOfRequests(){
		return numberOfRequests;
	}
	
	/**
	 * Gets the max number of nodes allowed for each virtual requests generated by the simulator
	 * @return max number of virtual nodes allowed for each virtual request
	 */
	public int getMaxNodes(){
		return maxNodes;
	}
	
	/**
	 * Gets the topology object generated by simulator
	 * @return topology object
	 */
	public Topology getTopology(){
		return topology;
	}
	
	// ---------------------------------------- MUTATORS ---------------------------------------- // 
	
	/**
	 * Sets the number of virtual requests the simulator must create
	 * @param numberOfRequests
	 */
	public void setNumberOfRequest(int numberOfRequests){
		this.numberOfRequests = numberOfRequests;
	}
	
	/**
	 * Sets the max number of virtual nodes a virtual request is allowed to have
	 * @param maxNodes
	 */
	public void setMaxNodes(int maxNodes){
		this.maxNodes = maxNodes;
	}
	
	// ---------------------------------------- OTHER METHODS ----------------------------------- //
	
	/**
	 * Generates number of requests. Default value is 100 requests unless other wise specified.
	 */
	public void generateRequests(){
		if(requests == null) this.requests = new ArrayList<>();

		for (int requestNumber = 0; requestNumber < numberOfRequests; requestNumber++){
			VirtualRequest request = new VirtualRequest(maxNodes, topology.getType());
			requests.add(request);
		}
	}
	
	/**
	 * Attempts to map all virtual requests generated using the specified algorithm
	 * @param algorithm
	 */
	public void start(int algorithm){		
		
		for(VirtualRequest vr: requests){
			Mapper mapper = null;
			
			switch(algorithm){
			case 1:		mapper = new Algorithm1(topology, vr);
					 	break;
			case 2:  	mapper = new Algorithm2(topology, vr);
						break;
			case 3:		mapper = new Algorithm3(topology, vr);
						break;
			}

			if (mapper.attemptRequestMapping()) topology.increaseRequestsMapped();
		}
	}
	
	/**
	 * Removes all mappings for all virtual requests and returns all resources to physical links 
	 * and physical nodes
	 */
	public void resetAllResources(){
		
		topology.setRequestsMapped(0);
		
		for(VirtualRequest vr: requests){
			if(vr.isBlocked())
				vr.unblock();
			for(int i = 1; i < vr.getVirtualNodes().size() - 1; i++)
				vr.getVirtualNodes().get(i).setMap(-1);
			for(VirtualLink vl: vr.getVirtualLinks())
				vl.setLinkMapping(null);
		}
		
		for(Map.Entry<Integer, PhysicalNode> entry: topology.getNodes().entrySet())
			entry.getValue().setComputationAvailability(topology.getComputationalAvailability());
		
		for(PhysicalLink pl: topology.getLinks())
			pl.setBandwidthAvailability(topology.getBandwidthAvailability());
	}
	
}
